{
  "_args": [
    [
      {
        "raw": "neo4j-driver",
        "scope": null,
        "escapedName": "neo4j-driver",
        "name": "neo4j-driver",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Mandy/Desktop/React-workspace/sudoedbapi"
    ]
  ],
  "_from": "neo4j-driver@latest",
  "_id": "neo4j-driver@1.2.0",
  "_inCache": true,
  "_location": "/neo4j-driver",
  "_nodeVersion": "4.2.6",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/neo4j-driver-1.2.0.tgz_1490280142153_0.19407880655489862"
  },
  "_npmUser": {
    "name": "neo4j-organization",
    "email": "npm@neo4j.com"
  },
  "_npmVersion": "3.5.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "neo4j-driver",
    "scope": null,
    "escapedName": "neo4j-driver",
    "name": "neo4j-driver",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/neo4j-driver/-/neo4j-driver-1.2.0.tgz",
  "_shasum": "e81ab4e8781d3839cb3b7c9bbde9b2d63a162356",
  "_shrinkwrap": null,
  "_spec": "neo4j-driver",
  "_where": "/Users/Mandy/Desktop/React-workspace/sudoedbapi",
  "author": {
    "name": "Neo Technology Inc."
  },
  "bugs": {
    "url": "https://github.com/neo4j/neo4j-javascript-driver/issues"
  },
  "dependencies": {
    "babel-runtime": "^6.18.0"
  },
  "description": "Connect to Neo4j 3.1.0 and up from JavaScript",
  "devDependencies": {
    "babel-core": "^6.17.0",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-preset-es2015": "^6.16.0",
    "babel-preset-stage-3": "^6.17.0",
    "babel-register": "^6.18.0",
    "babelify": "^7.3.0",
    "browserify": "^13.1.0",
    "esdoc": "0.4.8",
    "esdoc-importpath-plugin": "0.1.1",
    "fs-extra": "^1.0.0",
    "glob": "^5.0.14",
    "gulp": "^3.9.1",
    "gulp-babel": "^6.1.2",
    "gulp-batch": "^1.0.5",
    "gulp-concat": "^2.6.0",
    "gulp-cucumber": "0.0.14",
    "gulp-decompress": "^1.2.0",
    "gulp-download": "^0.0.1",
    "gulp-file": "^0.3.0",
    "gulp-if": "^1.2.5",
    "gulp-install": "^0.6.0",
    "gulp-jasmine": "^2.1.0",
    "gulp-jasmine-browser": "^0.2.3",
    "gulp-replace": "^0.5.4",
    "gulp-shell": "^0.4.3",
    "gulp-uglify": "^1.4.2",
    "gulp-util": "^3.0.6",
    "gulp-watch": "^4.3.5",
    "jasmine-reporters": "^2.0.7",
    "lolex": "^1.5.2",
    "merge-stream": "^1.0.0",
    "minimist": "^1.2.0",
    "mustache": "^2.3.0",
    "phantomjs-prebuilt": "^2.1.7 ",
    "run-sequence": "^1.1.4",
    "semver": "^5.3.0",
    "through2": "~2.0.0",
    "tmp": "0.0.31",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "e81ab4e8781d3839cb3b7c9bbde9b2d63a162356",
    "tarball": "https://registry.npmjs.org/neo4j-driver/-/neo4j-driver-1.2.0.tgz"
  },
  "homepage": "https://github.com/neo4j/neo4j-javascript-driver#readme",
  "license": "Apache-2.0",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "jakewins",
      "email": "jakewins@gmail.com"
    },
    {
      "name": "neo4j-organization",
      "email": "npm@neo4j.com"
    }
  ],
  "name": "neo4j-driver",
  "optionalDependencies": {},
  "readme": "# Neo4j Driver for Javascript\n\n\nA database driver for Neo4j 3.0.0+.\n\nResources to get you started:\n\n* [Detailed docs](http://neo4j.com/docs/api/javascript-driver/current/).\n* [Sample small project using the driver](https://github.com/neo4j-examples/movies-javascript-bolt)\n* [Sample application using the driver](https://github.com/neo4j-examples/neo4j-movies-template)\n* [Neo4j Manual](https://neo4j.com/docs/)\n* [Neo4j Refcard](https://neo4j.com/docs/cypher-refcard/current/)\n\n## Include module in Node.js application\n\nStable channel:\n```shell\nnpm install neo4j-driver\n// or\nbower install neo4j-driver\n```\n\nPre-release channel:\n```shell\nnpm install neo4j-driver@next\n```\n\nPlease note that `@next` only points to pre-releases that are not suitable for production use.\nTo get the latest stable release omit `@next` part altogether or use `@latest` instead.\n\n```javascript\nvar neo4j = require('neo4j-driver').v1;\n```\nDriver instance should be closed when Node.js application exits:\n\n```javascript\ndriver.close();\n```\n\notherwise application shutdown might hang or it might exit with a non-zero exit code.\n\n## Include in web browser\n\nWe build a special browser version of the driver, which supports connecting to Neo4j over WebSockets.\n\n```html\n<script src=\"lib/browser/neo4j-web.min.js\"></script>\n```\n\nThis will make a global `neo4j` object available, where you can access the `v1` API at `neo4j.v1`:\n\n```javascript\nvar driver = neo4j.driver(\"bolt://localhost\", neo4j.auth.basic(\"neo4j\", \"neo4j\"));\n```\n\nIt is not required to explicitly close the driver on a web page. Web browser should gracefully close all open \nWebSockets when the page is unloaded. However, driver instance should be explicitly closed when it's lifetime\nis not the same as the lifetime of the web page:\n \n```javascript\ndriver.close();\n```\n\n## Usage examples\n\n```javascript\n\n// Create a driver instance, for the user neo4j with password neo4j.\n// It should be enough to have a single driver per database per application.\nvar driver = neo4j.driver(\"bolt://localhost\", neo4j.auth.basic(\"neo4j\", \"neo4j\"));\n\n// Register a callback to know if driver creation was successful:\ndriver.onCompleted = function() {\n  // proceed with using the driver, it was successfully instantiated\n};\n\n// Register a callback to know if driver creation failed.\n// This could happen due to wrong credentials or database unavailability:\ndriver.onError = function(error) {\n  console.log('Driver instantiation failed', error);\n};\n\n// Create a session to run Cypher statements in.\n// Note: Always make sure to close sessions when you are done using them!\nvar session = driver.session();\n\n// Run a Cypher statement, reading the result in a streaming manner as records arrive:\nsession\n  .run(\"MERGE (alice:Person {name : {nameParam} }) RETURN alice.name\", { nameParam:'Alice' })\n  .subscribe({\n    onNext: function(record) {\n     console.log(record._fields);\n    },\n    onCompleted: function() {\n      // Completed!\n      session.close();\n    },\n    onError: function(error) {\n      console.log(error);\n    }\n  });\n\n// or\n// the Promise way, where the complete result is collected before we act on it:\nsession\n  .run(\"MERGE (james:Person {name : {nameParam} }) RETURN james.name\", { nameParam:'James' })\n  .then(function(result){\n    result.records.forEach(function(record) {\n      console.log(record._fields);\n    });\n    // Completed!\n    session.close();\n  })\n  .catch(function(error) {\n    console.log(error);\n  });\n\n//run statement in a transaction\nvar tx = session.beginTransaction();\ntx.run(\"MERGE (bob:Person {name : {nameParam} }) RETURN bob.name\", { nameParam:'Bob' })\n  .subscribe({\n    onNext: function(record) {\n      console.log(record._fields);\n      },\n    onCompleted: function() {\n      // Completed!\n      session.close();\n    },\n    onError: function(error) {\n      console.log(error);\n    }\n  });\n  \n//decide if the transaction should be committed or rolled back\nvar success = false;\n\nif (success) {\n  tx.commit()\n    .subscribe({\n      onCompleted: function() {\n        // Completed!\n      },\n      onError: function(error) {\n        console.log(error);\n        }\n      });\n  } else {\n  //transaction is rolled black and nothing is created in the database\n  console.log('rolled back');\n  tx.rollback();\n}\n\n// Close the driver when application exits\ndriver.close();\n```\n\nSubscriber API allows following combinations of `onNext`, `onCompleted` and `onError` callback invocations:\n * zero or more `onNext` followed by `onCompleted` when operation was successful. `onError` will not be invoked \n in this case\n * zero or more `onNext` followed by `onError` when operation failed. Callback `onError` might be invoked after \n couple `onNext` invocations because records are streamed lazily by the database. `onCompleted` will not be invoked \n in this case\n\n## Building\n\n    npm install\n    npm build\n\nThis produces browser-compatible standalone files under `lib/browser` and a Node.js module version under `lib/`.\nSee files under `examples/` on how to use.\n\n## Testing\n\n    ./runTests.sh\n\nThis runs the test suite against a fresh download of Neo4j.\nOr `npm test` if you already have a running version of a compatible Neo4j server.\n\nFor development, you can have the build tool rerun the tests each time you change\nthe source code:\n\n    gulp watch-n-test\n\n### Testing on windows\nRunning tests on windows requires PhantomJS installed and its bin folder added in windows system variable `Path`.\nTo run the same test suite, run `.\\runTest.ps1` instead in powershell with admin right.\nThe admin right is required to start/stop Neo4j properly as a system service.\nWhile there is no need to grab admin right if you are running tests against an existing Neo4j server using `npm test`.\n\n## A note on numbers and the Integer type\nThe Neo4j type system includes 64-bit integer values.\nHowever, Javascript can only safely represent integers between `-(2`<sup>`53`</sup>` - 1)` and `(2`<sup>`53`</sup>` - 1)`.\nIn order to support the full Neo4j type system, the driver will not automatically convert to javascript integers.\nAny time the driver receives an integer value from Neo4j, it will be represented with an internal integer type by the driver.\n\n### Write integers\nNumber written directly e.g. `session.run(\"CREATE (n:Node {age: {age}})\", {age: 22})` will be of type `Float` in Neo4j.\nTo write the `age` as an integer the `neo4j.int` method should be used:\n\n```javascript\nvar neo4j = require('neo4j-driver').v1;\n\nsession.run(\"CREATE (n {age: {myIntParam}})\", {myIntParam: neo4j.int(22)});\n```\n\nTo write integers larger than can be represented as JavaScript numbers, use a string argument to `neo4j.int`:\n\n```javascript\nsession.run(\"CREATE (n {age: {myIntParam}})\", {myIntParam: neo4j.int(\"9223372036854775807\")});\n```\n\n### Read integers\nSince Integers can be larger than can be represented as JavaScript numbers, it is only safe to convert to JavaScript numbers if you know that they will not exceed `(2`<sup>`53`</sup>` - 1)` in size.\nIn order to facilitate working with integers the driver include `neo4j.isInt`, `neo4j.integer.inSafeRange`, `neo4j.integer.toNumber`, and `neo4j.integer.toString`.\n\n```javascript\nvar aSmallInteger = neo4j.int(123);\nif (neo4j.integer.inSafeRange(aSmallInteger)) {\n    var aNumber = aSmallInteger.toNumber();\n}\n```\n\nIf you will be handling integers larger than that, you can should convert them to strings:\n\n```javascript\nvar aLargerInteger = neo4j.int(\"9223372036854775807\");\nif (!neo4j.integer.inSafeRange(aSmallInteger)) {\n    var integerAsString = aLargerInteger.toString();\n}\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/neo4j/neo4j-javascript-driver.git"
  },
  "scripts": {
    "boltkit": "gulp test-boltkit",
    "build": "gulp all",
    "docs": "esdoc -c esdoc.json",
    "run-tck": "gulp run-tck",
    "start-neo4j": "gulp start-neo4j",
    "stop-neo4j": "gulp stop-neo4j",
    "test": "gulp test",
    "versionRelease": "gulp set --version $VERSION && npm version $VERSION --no-git-tag-version"
  },
  "version": "1.2.0"
}
